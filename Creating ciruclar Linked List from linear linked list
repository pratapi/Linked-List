// Circular Linked Lists

#include <iostream>
using namespace std;

struct Node
{
	int val;
	Node * next;
};

class LinkedList
{
public:
	LinkedList(Node * head);
	virtual ~LinkedList();
	Node * GetHead();
	void Push(int val);
	void Print();
	bool MakeLinkListCircular();

private:
	Node * head;
};

LinkedList::LinkedList(Node * head = NULL) : head(head)
{
}

LinkedList::~LinkedList()
{
}

void LinkedList::Push(int val)
{
	Node * new_tmp = new Node;
	new_tmp->val = val;
	new_tmp->next = NULL;

	if (head == NULL)
	{
		head = new_tmp;
		return;
	}

	Node * tmp = head;
	while (tmp->next != NULL)
		tmp = tmp->next;

	tmp->next = new_tmp;
}

Node * LinkedList::GetHead()
{
	return head;
}

bool LinkedList::MakeLinkListCircular()
{
	Node * tmp = GetHead();
	Node * first = tmp;
	
	if (tmp == NULL)
		return false;
	while (tmp->next != NULL)
	{
		tmp = tmp->next;
	}

	tmp->next = first;
	return true;

}

void LinkedList::Print()
{
	Node * tmp = GetHead();
	Node * first = tmp;

	printf("List: \n");
	printf("%d ", tmp->val);
	tmp = tmp->next;
	while (tmp)
	{
		if (tmp == first)
			break;
		printf("%d ", tmp->val);
		tmp = tmp->next;
	}
	printf("\n");
}

int main()
{
	LinkedList * LnkList = new LinkedList();
	LnkList->Push(1);
	LnkList->Push(2);
	LnkList->Push(3);
	LnkList->Push(4);
	LnkList->Push(6);
	LnkList->MakeLinkListCircular();

	LnkList->Print();

	return 0;
}
