// Linked List
#include <iostream>
using namespace std;

struct Node
{
	int val;
	Node * next;
};

class LinkedList
{
public:
	LinkedList(Node * head);
	virtual ~LinkedList();

	Node * GetHead();
	void AddNodeAtRear(int val);
	void AddNodeAtFront(int val);
	void AtNode(int pos, int val);
	void DeleteNode(int pos);
	void PrintMiddle();
	void Print();
	void ReverseTheList();
	void DeleteAllNodes(Node * tmp);
	void CyclicityTest();
private:
	Node * head;
};

void LinkedList::Print()
{
	Node * tmp  = head;
	printf("List:  \n");
	while (tmp)
	{
		printf("%d  " ,tmp->val);
		tmp = tmp->next;
	}
	printf("\n");
}

LinkedList::LinkedList(Node * head = NULL) : head(head)
{

}

LinkedList::~LinkedList()
{
}

Node * LinkedList::GetHead()
{
	return head;
}


void LinkedList::AddNodeAtRear(int val)
{
	Node* tmp = new Node();
	tmp->val = val;
	tmp->next = NULL;
	if(head == NULL) {							// initial node
		this->head = tmp;
	} else									   // adding at end
	{
		Node * last = head;
		while(last->next != NULL)
		{
			last = last->next;
		}
		last->next = tmp;
	}

}

void LinkedList::AddNodeAtFront(int val)
{
	Node * tmp = new Node();
	tmp->val = val;
	Node * front = head;
	head = tmp;
	tmp->next = front;
}

void LinkedList::AtNode(int pos, int val)
{
	Node * tmp = new Node();
	tmp->val = val;
	tmp->next = NULL;
	--pos;
	Node * head_tmp = head;
	while(head_tmp != NULL && pos > 0)
	{
		head_tmp = head_tmp->next;
		--pos;
	}
	Node * tmp_next = head_tmp->next;
	head_tmp->next = tmp;
	tmp->next = tmp_next;


}

void LinkedList::DeleteNode(int pos)
{
	Node * head_tmp = head;
	--pos;
	while (head_tmp != NULL && pos > 0)
	{
		head_tmp =head_tmp->next;
		--pos;
	}
	Node * node_del = head_tmp->next;
	head_tmp->next = node_del->next;
	delete node_del;
}

void LinkedList::PrintMiddle()
{
	Node * fast = head;
	Node * slow = head;

	while (fast->next != NULL)
	{
		fast = fast->next->next;
		slow = slow->next;
	}

	printf("\n");
	printf("middle val : %d\n",slow->val);
}

void LinkedList::DeleteAllNodes(Node * tmp)
{
	if(tmp == NULL) return;

	DeleteAllNodes(tmp->next);
	printf("deleting Node %d   \n", tmp->val);
	delete tmp;
}

void LinkedList::ReverseTheList()
{
	if(head == NULL) return;
	Node * next, * current, * prev = NULL;
	current = head;
	while (current != NULL)
	{
		next = current->next;
		current->next = prev;
		prev = current;
		current = next;
	}
	printf("Priniting Reversed List \n");
	head = prev;
	Print();
}

void LinkedList::CyclicityTest()
{
	Node * slow_ptr = head;
	Node * fast_ptr = head;

	while(slow_ptr && fast_ptr && fast_ptr->next)
	{
		slow_ptr = slow_ptr->next;
		fast_ptr = fast_ptr->next->next;
		if(slow_ptr == fast_ptr) {
			printf("Cyclic Linked List /n");
			return;
		}
	}
	printf("Not Cylcic Linked List \n");
	return ;
}

int main()
{
	LinkedList * LnkList = new LinkedList();

	// adding at end
	LnkList->AddNodeAtRear(1);
	LnkList->AddNodeAtRear(2);
	LnkList->AddNodeAtRear(3);
	LnkList->AddNodeAtRear(4);

	// adding at begining
	LnkList->AddNodeAtFront(0);
	LnkList->AddNodeAtFront(-1);
	LnkList->AddNodeAtFront(-2);

	// add a node for given node
	LnkList->AtNode(3,146);
	LnkList->AtNode(4, 145);

	LnkList->Print();

	// delete node 
	LnkList->DeleteNode(3);
	LnkList->DeleteNode(3);
	LnkList->Print();
	LnkList->PrintMiddle();

	// Reverse the linked list
	LnkList->ReverseTheList();

	// Cyclicity Test
	LnkList->CyclicityTest();

	// Delete all nodes
	Node * phead  = LnkList->GetHead();
	LnkList->DeleteAllNodes(phead);

	return 0;

}
